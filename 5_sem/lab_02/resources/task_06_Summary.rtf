{\rtf1\ansi\ansicpg1251\deff0\deflang1049\deflangfe1049{\fonttbl{\f0\fmodern\fprq1\fcharset204{\*\fname Courier New;}Courier New CYR;}{\f1\froman\fprq2\fcharset204{\*\fname Times New Roman;}Times New Roman CYR;}{\f2\froman\fprq2\fcharset204 Bookman Old Style;}}
{\colortbl ;\red0\green0\blue0;}
{\stylesheet{ Normal;}{\s1 heading 1;}{\s2 heading 2;}}
\viewkind4\uc1\pard\keepn\s2\fi-576\li576\sb240\sa60\qc\tx576\tx1994\b\i\f0\fs28 1.1.\tab\'ce\'ef\'e8\'f1\'e0\'ed\'e8\'e5 \'fd\'ea\'f1\'ef\'e5\'f0\'e8\'ec\'e5\'ed\'f2\'e0 \'ab\'d1\'f0\'e0\'e2\'ed\'e5\'ed\'e8\'e5 \'e0\'eb\'e3\'ee\'f0\'e8\'f2\'ec\'ee\'e2 \'f1\'ee\'f0\'f2\'e8\'f0\'ee\'e2\'ea\'e8\'bb
\par \pard\cf1\b0\i0\f1\fs24 
\par \pard\fi567\sl360\slmult1\b\'d6\'e5\'eb\'fc \'fd\'ea\'f1\'ef\'e5\'f0\'e8\'ec\'e5\'ed\'f2\'e0:\b0  \'e8\'f1\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'ed\'e8\'e5 \'f1\'ef\'ee\'f1\'ee\'e1\'ee\'e2 \'fd\'f4\'f4\'e5\'ea\'f2\'e8\'e2\'ed\'ee\'e3\'ee \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'ed\'e8\'ff  \'ef\'e0\'ec\'ff\'f2\'e8 \'e8 \'e2\'fb\'ff\'e2\'eb\'e5\'ed\'e8\'e5 \'ed\'e0\'e8\'e1\'ee\'eb\'e5\'e5 \'fd\'f4\'f4\'e5\'ea\'f2\'e8\'e2\'ed\'fb\'f5 \'e0\'eb\'e3\'ee\'f0\'e8\'f2\'ec\'ee\'e2 \'f1\'ee\'f0\'f2\'e8\'f0\'ee\'e2\'ea\'e8, \'ef\'f0\'e8\'ec\'e5\'ed\'e8\'ec\'fb\'f5 \'e2 \'e2\'fb\'f7\'e8\'f1\'eb\'e8\'f2\'e5\'eb\'fc\'ed\'fb\'f5 \'f1\'e8\'f1\'f2\'e5\'ec\'e0\'f5. 
\par \b\'c8\'f1\'f5\'ee\'e4\'ed\'fb\'e5 \'e4\'e0\'ed\'ed\'fb\'e5:\b0  \'ea\'ee\'eb\'e8\'f7\'e5\'f1\'f2\'e2\'ee \'ef\'f0\'ee\'f6\'e5\'f1\'f1\'ee\'f0\'ee\'e2 \'e2\'fb\'f7\'e8\'f1\'eb\'e8\'f2\'e5\'eb\'fc\'ed\'ee\'e9 \'f1\'e8\'f1\'f2\'e5\'ec\'fb, \'f0\'e0\'e7\'ec\'e5\'f0 \'ef\'e0\'ea\'e5\'f2\'e0, \'ea\'ee\'eb\'e8\'f7\'e5\'f1\'f2\'e2\'ee \'fd\'eb\'e5\'ec\'e5\'ed\'f2\'ee\'e2 \'e2 \'ec\'e0\'f1\'f1\'e8\'e2\'e5, \'f0\'e0\'e7\'f0\'ff\'e4\'ed\'ee\'f1\'f2\'fc \'fd\'eb\'e5\'ec\'e5\'ed\'f2\'ee\'e2 \'ec\'e0\'f1\'f1\'e8\'e2\'e0.
\par \b\'d0\'e5\'e7\'f3\'eb\'fc\'f2\'e0\'f2\'fb \'fd\'ea\'f1\'ef\'e5\'f0\'e8\'ec\'e5\'ed\'f2\'e0:\b0  \'ee\'f2\'ed\'ee\'f8\'e5\'ed\'e8\'e5 \'e2\'f0\'e5\'ec\'e5\'ed\'e8 \'f1\'ee\'f0\'f2\'e8\'f0\'ee\'e2\'ea\'e8 \'ec\'e0\'f1\'f1\'e8\'e2\'e0 \'e0\'eb\'e3\'ee\'f0\'e8\'f2\'ec\'ee\'ec QuickSort \'ea\'ee \'e2\'f0\'e5\'ec\'e5\'ed\'e8 \'f1\'ee\'f0\'f2\'e8\'f0\'ee\'e2\'ea\'e8 \'e0\'eb\'e3\'ee\'f0\'e8\'f2\'ec\'ee\'ec Radix-Counting Sort .
\par \b\'ce\'ef\'e8\'f1\'e0\'ed\'e8\'e5 \'ef\'f0\'ee\'e1\'eb\'e5\'ec\'fb.\b0   \'d1\'f3\'f9\'e5\'f1\'f2\'e2\'f3\'e5\'f2 \'ed\'e5\'f1\'ea\'ee\'eb\'fc\'ea\'ee \'e4\'e5\'f1\'ff\'f2\'ea\'ee\'e2 \'e0\'eb\'e3\'ee\'f0\'e8\'f2\'ec\'ee\'e2 \'f1\'ee\'f0\'f2\'e8\'f0\'ee\'e2\'ea\'e8. \'c8\'f5 \'ec\'ee\'e6\'ed\'ee \'ea\'eb\'e0\'f1\'f1\'e8\'f4\'e8\'f6\'e8\'f0\'ee\'e2\'e0\'f2\'fc \'ef\'ee \'f2\'e0\'ea\'e8\'ec \'ea\'f0\'e8\'f2\'e5\'f0\'e8\'ff\'ec, \'ea\'e0\'ea: \'ed\'e0\'e7\'ed\'e0\'f7\'e5\'ed\'e8\'e5 (\'e2\'ed\'f3\'f2\'f0\'e5\'ed\'ed\'ff\'ff \'e8 \'e2\'ed\'e5\'f8\'ed\'ff\'ff \'f1\'ee\'f0\'f2\'e8\'f0\'ee\'e2\'ea\'e8), \'e2\'fb\'f7\'e8\'f1\'eb\'e8\'f2\'e5\'eb\'fc\'ed\'e0\'ff \'f1\'eb\'ee\'e6\'ed\'ee\'f1\'f2\'fc (\'e0\'eb\'e3\'ee\'f0\'e8\'f2\'ec\'fb \'f1 \'e2\'fb\'f7\'e8\'f1\'eb\'e8\'f2\'e5\'eb\'fc\'ed\'fb\'ec\'e8 \'f1\'eb\'ee\'e6\'ed\'ee\'f1\'f2\'ff\'ec\'e8 O(n\super 2\nosupersub ), O(n*log(n)), O(n), O(n/log(n))), \'e5\'ec\'ea\'ee\'f1\'f2\'ed\'e0\'ff \'f1\'eb\'ee\'e6\'ed\'ee\'f1\'f2\'fc (\'e0\'eb\'e3\'ee\'f0\'e8\'f2\'ec\'fb, \'f2\'f0\'e5\'e1\'f3\'fe\'f9\'e8\'e5 \'e8 \'ed\'e5 \'f2\'f0\'e5\'e1\'f3\'fe\'f9\'e8\'e5 \'e4\'ee\'ef\'ee\'eb\'ed\'e8\'f2\'e5\'eb\'fc\'ed\'ee\'e3\'ee \'ec\'e0\'f1\'f1\'e8\'e2\'e0), \'e2\'ee\'e7\'ec\'ee\'e6\'ed\'ee\'f1\'f2\'fc \'f0\'e0\'f1\'ef\'e0\'f0\'e0\'eb\'eb\'e5\'eb\'e8\'e2\'e0\'ed\'e8\'ff (\'ed\'e5 \'f0\'e0\'f1\'ef\'e0\'f0\'e0\'eb\'eb\'e5\'eb\'e8\'e2\'e0\'e5\'ec\'fb\'e5, \'ee\'e3\'f0\'e0\'ed\'e8\'f7\'e5\'ed\'ed\'ee \'f0\'e0\'f1\'ef\'e0\'f0\'e0\'eb\'eb\'e5\'eb\'e8\'e2\'e0\'e5\'ec\'fb\'e5, \'ef\'ee\'eb\'ed\'ee\'f1\'f2\'fc\'fe \'f0\'e0\'f1\'ef\'e0\'f0\'e0\'eb\'eb\'e5\'eb\'e8\'e2\'e0\'e5\'ec\'fb\'e5), \'ef\'f0\'e8\'ed\'f6\'e8\'ef \'ee\'ef\'f0\'e5\'e4\'e5\'eb\'e5\'ed\'e8\'ff \'ef\'ee\'f0\'ff\'e4\'ea\'e0 (\'e0\'eb\'e3\'ee\'f0\'e8\'f2\'ec\'fb, \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'f3\'fe\'f9\'e8\'e5 \'ef\'e0\'f0\'ed\'fb\'e5 \'f1\'f0\'e0\'e2\'ed\'e5\'ed\'e8\'ff \'e8 \'ed\'e5 \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'f3\'fe\'f9\'e8\'e5 \'ef\'e0\'f0\'ed\'fb\'e5 \'f1\'f0\'e0\'e2\'ed\'e5\'ed\'e8\'ff). 
\par \'d1\'f0\'e5\'e4\'e8 \'e8\'e7\'e2\'e5\'f1\'f2\'ed\'fb\'f5 \'e0\'eb\'e3\'ee\'f0\'e8\'f2\'ec\'ee\'e2 \'ed\'e5 \'e2\'fb\'e4\'e5\'eb\'e5\'ed\'ee \'ee\'e4\'ed\'ee\'e7\'ed\'e0\'f7\'ed\'ee\'e3\'ee \'eb\'e8\'e4\'e5\'f0\'e0, \'e2\'fb\'ef\'ee\'eb\'ed\'ff\'fe\'f9\'e5\'e3\'ee \'f1\'ee\'f0\'f2\'e8\'f0\'ee\'e2\'ea\'f3 \'f7\'e8\'f1\'e5\'eb \'eb\'fe\'e1\'ee\'e9 \'f0\'e0\'e7\'f0\'ff\'e4\'ed\'ee\'f1\'f2\'e8 \'e7\'e0 \'ec\'e8\'ed\'e8\'ec\'e0\'eb\'fc\'ed\'ee\'e5 \'e2\'f0\'e5\'ec\'ff \'f1 \'ec\'e8\'ed\'e8\'ec\'e0\'eb\'fc\'ed\'ee\'e9 \'e5\'ec\'ea\'ee\'f1\'f2\'ed\'ee\'e9 \'f1\'eb\'ee\'e6\'ed\'ee\'f1\'f2\'fc\'fe. \'d1\'f7\'e8\'f2\'e0\'e5\'f2\'f1\'ff [6,7], \'f7\'f2\'ee \'f5\'ee\'f0\'ee\'f8\'e8\'e5 \'f0\'e5\'e7\'f3\'eb\'fc\'f2\'e0\'f2\'fb \'ee\'e1\'e5\'f1\'ef\'e5\'f7\'e8\'e2\'e0\'e5\'f2 \'e0\'eb\'e3\'ee\'f0\'e8\'f2\'ec \'e2\'ed\'f3\'f2\'f0\'e5\'ed\'ed\'e5\'e9 \'f1\'ee\'f0\'f2\'e8\'f0\'ee\'e2\'ea\'e8 QuickSort, \'e8\'ec\'e5\'fe\'f9\'e8\'e9 \'e2\'fb\'f7\'e8\'f1\'eb\'e8\'f2\'e5\'eb\'fc\'ed\'f3\'fe \'f1\'eb\'ee\'e6\'ed\'ee\'f1\'f2\'fc \'e2 \'f1\'f0\'e5\'e4\'ed\'e5\'ec O(n*log(n)) \'e8 O(n\super 2\nosupersub ) \'e2 \'f5\'f3\'e4\'f8\'e5\'ec. \'d2\'e5\'ee\'f0\'e5\'f2\'e8\'f7\'e5\'f1\'ea\'e8 \'e4\'ee\'ea\'e0\'e7\'e0\'ed\'ee, \'f7\'f2\'ee \'e0\'eb\'e3\'ee\'f0\'e8\'f2\'ec\'fb, \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'f3\'fe\'f9\'e8\'e5 \'ef\'e0\'f0\'ed\'fb\'e5 \'f1\'f0\'e0\'e2\'ed\'e5\'ed\'e8\'ff \'ed\'e5 \'ec\'ee\'e3\'f3\'f2 \'e8\'ec\'e5\'f2\'fc \'e2\'fb\'f7\'e8\'f1\'eb\'e8\'f2\'e5\'eb\'fc\'ed\'f3\'fe \'f1\'eb\'ee\'e6\'ed\'ee\'f1\'f2\'fc \'ec\'e5\'ed\'fc\'f8\'f3\'fe, \'f7\'e5\'ec O(n*log(n)).
\par \'ce\'f1\'ee\'e1\'fb\'e9 \'e8\'ed\'f2\'e5\'f0\'e5\'f1 \'ef\'f0\'e5\'e4\'f1\'f2\'e0\'e2\'eb\'ff\'fe\'f2 \'e0\'eb\'e3\'ee\'f0\'e8\'f2\'ec\'fb \'e2\'ed\'f3\'f2\'f0\'e5\'ed\'ed\'e5\'e9 \'f1\'ee\'f0\'f2\'e8\'f0\'ee\'e2\'ea\'e8, \'ed\'e5 \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'f3\'fe\'f9\'e8\'e5 \'ef\'e0\'f0\'ed\'fb\'e5 \'f1\'f0\'e0\'e2\'ed\'e5\'ed\'e8\'ff: Counting Sort, Radix Sort \'e8 \'e4\'f0\'f3\'e3\'e8\'e5. \'c2 \'f0\'e0\'e1\'ee\'f2\'e5 [4] \'ef\'f0\'e5\'e4\'eb\'ee\'e6\'e5\'ed \'e0\'eb\'e3\'ee\'f0\'e8\'f2\'ec, \'ff\'e2\'eb\'ff\'fe\'f9\'e8\'e9\'f1\'ff \'f1\'ee\'f7\'e5\'f2\'e0\'ed\'e8\'e5\'ec \'e0\'eb\'e3\'ee\'f0\'e8\'f2\'ec\'ee\'e2 Counting Sort (\'f1\'ee\'f0\'f2\'e8\'f0\'ee\'e2\'ea\'e0 \'ef\'ee\'e4\'f1\'f7\'e5\'f2\'ee\'ec) \'e8 Radix Sort (\'ef\'ee\'f0\'e0\'e7\'f0\'ff\'e4\'ed\'e0\'ff \'f1\'ee\'f0\'f2\'e8\'f0\'ee\'e2\'ea\'e0), \'eb\'e8\'f8\'e5\'ed\'ed\'fb\'e9 \'ed\'e5\'ea\'ee\'f2\'ee\'f0\'fb\'f5 \'ef\'f0\'e8\'f1\'f3\'f9\'e8\'f5 \'e8\'ec \'ed\'e5\'e4\'ee\'f1\'f2\'e0\'f2\'ea\'ee\'e2. \'c2 [4,5] \'ef\'ee\'eb\'f3\'f7\'e5\'ed\'fb \'ee\'f6\'e5\'ed\'ea\'e8 \'e2\'fb\'f7\'e8\'f1\'eb\'e8\'f2\'e5\'eb\'fc\'ed\'ee\'e9 \'f1\'eb\'ee\'e6\'ed\'ee\'f1\'f2\'e8 Radix-Counting \'e0\'eb\'e3\'ee\'f0\'e8\'f2\'ec\'e0  (O(n/log(n))), \'f2.\'e5. \'ee\'ed\'e0 \'ec\'e5\'ed\'e5\'e5 \'f7\'e5\'ec \'eb\'e8\'ed\'e5\'e9\'ed\'e0. \'ce\'e4\'ed\'e0\'ea\'ee, \'e2\'fb\'f7\'e8\'f1\'eb\'e8\'f2\'e5\'eb\'fc\'ed\'e0\'ff \'f1\'eb\'ee\'e6\'ed\'ee\'f1\'f2\'fc \'e0\'eb\'e3\'ee\'f0\'e8\'f2\'ec\'e0 \'f1\'f3\'f9\'e5\'f1\'f2\'e2\'e5\'ed\'ed\'ee \'e7\'e0\'e2\'e8\'f1\'e8\'f2 \'ee\'f2 \'e5\'e3\'ee \'ed\'e0\'f1\'f2\'f0\'ee\'e9\'ea\'e8 \'ed\'e0 \'ee\'ef\'f0\'e5\'e4\'e5\'eb\'e5\'ed\'ed\'f3\'fe \'f0\'e0\'e7\'f0\'ff\'e4\'ed\'ee\'f1\'f2\'fc \'f7\'e8\'f1\'e5\'eb \'e8 \'f0\'e0\'e7\'ec\'e5\'f0\'ed\'ee\'f1\'f2\'fc \'ec\'e0\'f1\'f1\'e8\'e2\'ee\'e2. \'c4\'eb\'ff \'e2\'fb\'ef\'ee\'eb\'ed\'e5\'ed\'e8\'ff \'f1\'ee\'f0\'f2\'e8\'f0\'ee\'e2\'ea\'e8 \'ed\'e0 \'ec\'ed\'ee\'e3\'ee\'ef\'f0\'ee\'f6\'e5\'f1\'f1\'ee\'f0\'ed\'fb\'f5 \'dd\'c2\'cc \'f2\'f0\'e5\'e1\'f3\'e5\'f2\'f1\'ff \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'f2\'fc \'ee\'ef\'f2\'e8\'ec\'e8\'e7\'e8\'f0\'ee\'e2\'e0\'ed\'ed\'f3\'fe \'f1\'f2\'f0\'e0\'f2\'e5\'e3\'e8\'fe Radix-Counting \'f1\'ee\'f0\'f2\'e8\'f0\'ee\'e2\'ea\'e8, \'f3\'f7\'e8\'f2\'fb\'e2\'e0\'fe\'f9\'f3\'fe \'ea\'ee\'eb\'e8\'f7\'e5\'f1\'f2\'e2\'ee \'ef\'f0\'ee\'f6\'e5\'f1\'f1\'ee\'f0\'ee\'e2, \'e0 \'f2\'e0\'ea\'e6\'e5 \'ef\'e0\'ea\'e5\'f2\'ed\'fb\'e9 \'f0\'e5\'e6\'e8\'ec \'ee\'e1\'ec\'e5\'ed\'e0 \'ef\'f0\'ee\'f6\'e5\'f1\'f1\'ee\'f0\'e0 \'e8 \'ee\'ef\'e5\'f0\'e0\'f2\'e8\'e2\'ed\'ee\'e9 \'ef\'e0\'ec\'ff\'f2\'e8. 
\par \pard\fi567\lang1033\f2\fs20 //\'c0\'eb\'e3\'ee\'f0\'e8\'f2\'ec QUICK-SORT
\par //\'c2\'fb\'e4\'e5\'eb\'e5\'ed\'e8\'e5 \'ef\'e0\'ec\'ff\'f2\'e8 
\par QMAS = (unsigned __int64 *) _malloc128(Param_[0]*sizeof(unsigned __int64));
\par RMAS = (unsigned __int8 *) _malloc128(Param_[0]*sizeof(unsigned __int64));
\par TMP =  (unsigned __int8 *) _malloc128(Param_[0]*sizeof(unsigned __int64));
\par TMP_A64 = (unsigned __int64 *)RMAS;
\par TMP_B64 = (unsigned __int64 *)QMAS;
\par 
\par for (b = Param_[1]; b <= Param_[0]; b += Param_[1])
\par \{
\par             \tab Start_Count(); // \lang1049\'cd\'e0\'f7\'e0\'eb\'ee\lang1033  \lang1049\'e7\'e0\'ec\'e5\'f0\'e0\lang1033  \lang1049\'e2\'f0\'e5\'ec\'e5\'ed\'e8\lang1033 
\par \b                 QuickSort(QMAS,0,b-1);
\par \b0          \tab\lang1049 Finish_Count();// \'ca\'ee\'ed\'e5\'f6 \'e7\'e0\'ec\'e5\'f0\'e0 \'e2\'f0\'e5\'ec\'e5\'ed\'e8
\par \i               // \'d0\'e5\'e7\'f3\'eb\'fc\'f2\'e0\'f2:
\par \tab\tab     // \'cf\'ee \'ee\'f1\'e8 \'d5: b*Param_[1]
\par \tab\tab     // \'cf\'ee \'ee\'f1\'e8 Y: \'c2\'f0\'e5\'ec\'ff (\'ca\'ee\'eb\'e8\'f7\'e5\'f1\'f2\'e2\'ee \'f2\'e0\'ea\'f2\'ee\'e2)
\par \lang1033\i0\}
\par 
\par \b void QuickSort (unsigned __int64* A, int iLo, int iHi)
\par \{
\par         int Lo, Hi;
\par         unsigned __int64 Mid,T;
\par         Lo = iLo;
\par         Hi = iHi;
\par         Mid = A[(Lo + Hi)>>1];
\par         do
\par         \{       while (A[Lo] < Mid) \{Lo++;\};
\par                 while (A[Hi] > Mid) \{Hi--;\};
\par                 if (Lo <= Hi) 
\par                 \{
\par                         T = A[Lo];
\par                         A[Lo] = A[Hi];
\par                         A[Hi] = T;
\par                         Lo++;
\par                         Hi--;
\par                 \}
\par         \} while (Lo < Hi);
\par         if (Hi > iLo) \{QuickSort(A, iLo, Hi);\};
\par         if (Lo < iHi) \{QuickSort(A, Lo, iHi);\};
\par \lang1049\}
\par 
\par \b0 //\'c0\'eb\'e3\'ee\'f0\'e8\'f2\'ec RADIX-COUNTING (\'f0\'e0\'e7\'ec\'e5\'f0\'ed\'ee\'f1\'f2\'fc \'e2\'f1\'e5\'f5 \'e3\'f0\'f3\'ef\'ef \'f0\'e0\'e7\'f0\'ff\'e4\'ee\'e2: 8 \'e1\'e8\'f2).
\par \lang1033 for (b = Param_[1]; b <= Param_[0]; b += Param_[1])
\par         \{
\par                 TMP_A64 = (unsigned __int64 *)RMAS;
\par                 TMP_B64 = (unsigned __int64 *)TMP;
\par             \tab   Start_Count(); // \lang1049\'cd\'e0\'f7\'e0\'eb\'ee\lang1033  \lang1049\'e7\'e0\'ec\'e5\'f0\'e0\lang1033  \lang1049\'e2\'f0\'e5\'ec\'e5\'ed\'e8\lang1033 
\par \b                 for (i=0; i<=7; i++) \{
\par \pard\fi720\li720\lang1049\b0 //\'c7\'e0\'ef\'ee\'eb\'ed\'e8\'f2\'fc \'ec\'e0\'f1\'f1\'e8\'e2 \'f1 \'ed\'f3\'eb\'ff\'ec\'e8
\par \pard\fi567\b                         for (j=0; j<=255; j++)  \{c[j]=0;\};
\par \pard\fi720\li720\b0 //\'cd\'e0\'ea\'ee\'ef\'e8\'f2\'fc \'e2 \'ec\'e0\'f1\'f1\'e8\'e2\'e5 C \'ea\'ee\'eb\'e8\'f7\'e5\'f1\'f2\'e2\'e0 \'ef\'ee\'e2\'f2\'ee\'f0\'e5\'ed\'e8\'e9 \'f0\'e0\'e7\'f0\'ff\'e4\'ee\'e2
\par \pard\fi567\b                         \lang1033 for (j=0; j<b; j++) \{c[RMAS[i+j*8]]++;\};
\par \pard\fi720\li720\lang1049\b0 //\'d1\'ee\'f5\'f0\'e0\'ed\'e8\'f2\'fc \'e2 \'ec\'e0\'f1\'f1\'e8\'e2\'e5 C \'ea\'ee\'eb\'e8\'f7\'e5\'f1\'f2\'e2\'ee \'f7\'e8\'f1\'e5\'eb, \'ec\'e5\'ed\'fc\'f8\'e8\'f5 \'e4\'e0\'ed\'ed\'ee\'e3\'ee
\par \pard\fi567\b                         \lang1033 for (j=1; j<=255; j++) \{c[j] += c[j-1];\};
\par                         \lang1049 for (j=b-1; j>=0; j--)  \{
\par \pard\fi720\li720\b0 //\'cc\'ee\'e4\'e8\'f4\'e8\'f6\'e8\'f0\'ee\'e2\'e0\'f2\'fc \'ec\'e0\'f1\'f1\'e8\'e2 C \'e4\'eb\'ff \'e4\'e0\'ed\'ed\'ee\'e3\'ee \'e7\'ed\'e0\'f7\'e5\'ed\'e8\'ff \'f0\'e0\'e7\'f0\'ff\'e4\'e0
\par \pard\fi567\b                                 c[RMAS[i+j*8]]--;
\par \pard\fi720\li720\b0 //\'c7\'e0\'ef\'e8\'f1\'e0\'f2\'fc \'f7\'e8\'f1\'eb\'ee \'e8\'e7 \'e8\'f1\'f5\'ee\'e4\'ed\'ee\'e3\'ee \'ec\'e0\'f1\'f1\'e8\'e2\'e0 \'e2\'ee \'e2\'f0\'e5\'ec\'e5\'ed\'ed\'fb\'e9 \'ec\'e0\'f1\'f1\'e8\'e2
\par \pard\fi567\b                                 \lang1033 temp = TMP_A64[j];
\par                                 TMP_B64[c[RMAS[i+j*8]]] = temp; \}
\par \pard\fi720\li720\lang1049\b0 //\'cf\'ee\'e4\'e3\'ee\'f2\'ee\'e2\'e8\'f2\'fc\'f1\'ff \'ea \'f1\'ee\'f0\'f2\'e8\'f0\'ee\'e2\'ea\'e5 \'ef\'ee \'f1\'eb\'e5\'e4\'f3\'fe\'f9\'e5\'ec\'f3 \'f0\'e0\'e7\'f0\'ff\'e4\'f3
\par \pard\fi567\b                         \lang1033 p=TMP;
\par                         TMP=RMAS;
\par                         RMAS=p;
\par                         TMP_A64 = (unsigned __int64 *)RMAS;
\par                         TMP_B64 = (unsigned __int64 *)TMP;
\par                 \lang1049\}
\par \b0          \tab   Finish_Count();// \'ca\'ee\'ed\'e5\'f6 \'e7\'e0\'ec\'e5\'f0\'e0 \'e2\'f0\'e5\'ec\'e5\'ed\'e8
\par \i                // \'d0\'e5\'e7\'f3\'eb\'fc\'f2\'e0\'f2:
\par \tab\tab  // \'cf\'ee \'ee\'f1\'e8 \'d5: b*Param_[1]
\par \tab\tab  // \'cf\'ee \'ee\'f1\'e8 Y: \'c2\'f0\'e5\'ec\'ff (\'ca\'ee\'eb\'e8\'f7\'e5\'f1\'f2\'e2\'ee \'f2\'e0\'ea\'f2\'ee\'e2)
\par \i0         \}
\par //\'c0\'eb\'e3\'ee\'f0\'e8\'f2\'ec RADIX-COUNTING, \'ee\'ef\'f2\'e8\'ec\'e8\'e7\'e8\'f0\'ee\'e2\'e0\'ed\'ed\'ee\'e9 \'ef\'ee\'e4 8 \'ef\'f0\'ee\'f6\'e5\'f1\'f1\'ee\'f0\'ee\'e2
\par         \lang1033 for (b = Param_[1]; b <= Param_[0]; b += Param_[1])
\par         \{
\par                 TMP_A64 = (unsigned __int64 *)RMAS;
\par                 TMP_B64 = (unsigned __int64 *)TMP;
\par             \tab   Start_Count(); // \lang1049\'cd\'e0\'f7\'e0\'eb\'ee\lang1033  \lang1049\'e7\'e0\'ec\'e5\'f0\'e0\lang1033  \lang1049\'e2\'f0\'e5\'ec\'e5\'ed\'e8\lang1033 
\par \b                 for (i=0; i<256*8; i++) \{copt[i]=0;\};
\par                 \lang1049 j=0;
\par                 for (k=0; k<b; k++)  \{
\par \pard\li1440 //\'cf\'e0\'f0\'e0\'eb\'eb\'e5\'eb\'fc\'ed\'ee\'e5 \'ee\'e1\'f0\'e0\'f9\'e5\'ed\'e8\'e5 \'ea 8 \'f7\'e0\'f1\'f2\'ff\'ec copt 
\par \pard\fi567                                 \lang1033 copt[RMAS[j+0]*8+0]++;
\par                                 copt[RMAS[j+1]*8+1]++;
\par                                 copt[RMAS[j+2]*8+2]++;
\par                                 copt[RMAS[j+3]*8+3]++;
\par                                 copt[RMAS[j+4]*8+4]++;
\par                                 copt[RMAS[j+5]*8+5]++;
\par                                 copt[RMAS[j+6]*8+6]++;
\par                                 copt[RMAS[j+7]*8+7]++;
\par                                 \lang1049 j+=8;
\par                 \}
\par                 for (j=1; j<256; j++) \{
\par \pard\li1440 //\'cf\'e0\'f0\'e0\'eb\'eb\'e5\'eb\'fc\'ed\'ee\'e5 \'ee\'e1\'f0\'e0\'f9\'e5\'ed\'e8\'e5 \'ea 8 \'f7\'e0\'f1\'f2\'ff\'ec copt 
\par \pard\fi567                                 \lang1033 copt[j*8+0] += copt[j*8-8+0];
\par                                 copt[j*8+1] += copt[j*8-8+1];
\par                                 copt[j*8+2] += copt[j*8-8+2];
\par                                 copt[j*8+3] += copt[j*8-8+3];
\par                                 copt[j*8+4] += copt[j*8-8+4];
\par                                 copt[j*8+5] += copt[j*8-8+5];
\par                                 copt[j*8+6] += copt[j*8-8+6];
\par                                 copt[j*8+7] += copt[j*8-8+7];
\par                 \}
\par                 for (i=0; i<=7; i++)
\par                 \{
\par                         for (j=b-1; j>=0; j--)
\par                         \{
\par                                 ii=(RMAS[j*8+i])*8+i;
\par                                 jj=--copt[ii];
\par                                 temp = TMP_A64[j];
\par                                 TMP_B64[jj] = temp;
\par                         \}
\par                         p=TMP;
\par                         TMP=RMAS;
\par                         RMAS=p;
\par                         TMP_A64 = (unsigned __int64 *)RMAS;
\par                         TMP_B64 = (unsigned __int64 *)TMP;
\par                 \lang1049\}
\par \b0          \tab   Finish_Count();// \'ca\'ee\'ed\'e5\'f6 \'e7\'e0\'ec\'e5\'f0\'e0 \'e2\'f0\'e5\'ec\'e5\'ed\'e8
\par \i                // \'d0\'e5\'e7\'f3\'eb\'fc\'f2\'e0\'f2:
\par \tab\tab  // \'cf\'ee \'ee\'f1\'e8 \'d5: b*Param_[1]
\par \tab\tab  // \'cf\'ee \'ee\'f1\'e8 Y: \'c2\'f0\'e5\'ec\'ff (\'ca\'ee\'eb\'e8\'f7\'e5\'f1\'f2\'e2\'ee \'f2\'e0\'ea\'f2\'ee\'e2)
\par \i0         \}
\par \pard\fi567\sl360\slmult1\f1\fs24 
\par \b\'d1\'f3\'f2\'fc \'fd\'ea\'f1\'ef\'e5\'f0\'e8\'ec\'e5\'ed\'f2\'e0.\b0   \'dd\'ea\'f1\'ef\'e5\'f0\'e8\'ec\'e5\'ed\'f2 \'ee\'f1\'ed\'ee\'e2\'e0\'ed \'ed\'e0 \'e7\'e0\'ec\'e5\'f0\'e5 \'e2\'f0\'e5\'ec\'e5\'ed\'e8 \'f2\'f0\'e5\'f5 \'e2\'e0\'f0\'e8\'e0\'ed\'f2\'ee\'e2 \'e0\'eb\'e3\'ee\'f0\'e8\'f2\'ec\'ee\'e2 \'f1\'ee\'f0\'f2\'e8\'f0\'ee\'e2\'ea\'e8 (Quick Sort, Radix Sort, \'ce\'ef\'f2\'e8\'ec\'e8\'e7\'e8\'f0\'ee\'e2\'e0\'ed\'ed\'fb\'e9 Radix Sort) . 
\par \'c4\'eb\'ff \'ef\'f0\'ee\'e2\'e5\'e4\'e5\'ed\'e8\'ff \'fd\'ea\'f1\'ef\'e5\'f0\'e8\'ec\'e5\'ed\'f2\'e0 \'ed\'e5\'ee\'e1\'f5\'ee\'e4\'e8\'ec\'ee \'e7\'e0\'e4\'e0\'f2\'fc \'e8\'e7\'ec\'e5\'ed\'ff\'e5\'ec\'fb\'e5 \'ef\'e0\'f0\'e0\'ec\'e5\'f2\'f0\'fb:
\par 
\par \trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw30\brdrcf1 \trbrdrb\brdrs\brdrw20\brdrcf1 \clbrdrt\brdrw30\brdrs\clbrdrb\brdrw30\brdrs \cellx1276\clbrdrt\brdrw30\brdrs\clbrdrb\brdrw30\brdrs \cellx2552\clbrdrt\brdrw30\brdrs\clbrdrb\brdrw30\brdrs \cellx3828\clbrdrt\brdrw30\brdrs\clbrdrb\brdrw30\brdrs \cellx9382\pard\intbl\cf0\lang1033\b\'cf\'e0\'f0\'e0\'ec\'e5\'f2\'f0\cell\'c4\'e8\'e0\'ef\'e0\'e7\'ee\'ed \cell\'cc\'e0\'f1\'f8\'f2\'e0\'e1 \cell\'ce\'ef\'e8\'f1\'e0\'ed\'e8\'e5\cell\b0\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw30\brdrcf1 \trbrdrb\brdrs\brdrw20\brdrcf1 \clbrdrt\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx1276\clbrdrt\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx2552\clbrdrt\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx3828\clbrdrt\brdrw15\brdrs\clbrdrb\brdrw15\brdrs \cellx9382\pard\intbl\'b9 1\cell 1..20\cell M\cell\lang1049\'ca\'ee\'eb\'e8\'f7\'e5\'f1\'f2\'e2\'ee 64-\'f5 \'f0\'e0\'e7\'f0\'ff\'e4\'ed\'fb\'f5 \'fd\'eb\'e5\'ec\'e5\'ed\'f2\'ee\'e2 \'ec\'e0\'f1\'f1\'e8\'e2\'ee\'e2\cell\row
\trowd\trgaph108\trleft-108\trbrdrt\brdrs\brdrw30\brdrcf1 \trbrdrb\brdrs\brdrw20\brdrcf1 \clbrdrt\brdrw15\brdrs\clbrdrb\brdrw30\brdrs \cellx1276\clbrdrt\brdrw15\brdrs\clbrdrb\brdrw30\brdrs \cellx2552\clbrdrt\brdrw15\brdrs\clbrdrb\brdrw30\brdrs \cellx3828\clbrdrt\brdrw15\brdrs\clbrdrb\brdrw30\brdrs \cellx9382\pard\intbl\lang1033\'b9 2\cell 4..1024\cell K\cell\'d8\'e0\'e3 \'f3\'e2\'e5\'eb\'e8\'f7\'e5\'ed\'e8\'ff \'f0\'e0\'e7\'ec\'e5\'f0\'e0 \'ec\'e0\'f1\'f1\'e8\'e2\'e0\cell\row
\pard\fi567\sl360\slmult1\cf1\lang1049 
\par \'d4\'e8\'ee\'eb\'e5\'f2\'ee\'e2\'fb\'e9 \'e3\'f0\'e0\'f4\'e8\'ea (\'e2\'e5\'f0\'f5\'ed\'e8\'e9) \'ef\'ee\'ea\'e0\'e7\'fb\'e2\'e0\'e5\'f2 \'e2\'f0\'e5\'ec\'ff \'e8\'eb\'e8 \'ea\'ee\'eb\'e8\'f7\'e5\'f1\'f2\'e2\'ee \'f2\'e0\'ea\'f2\'ee\'e2 \'f0\'e0\'e1\'ee\'f2\'fb \'e0\'eb\'e3\'ee\'f0\'e8\'f2\'ec\'e0 QuickSort. \'ca\'f0\'e0\'f1\'ed\'fb\'e9 \'e3\'f0\'e0\'f4\'e8\'ea (\'f1\'f0\'e5\'e4\'ed\'e8\'e9) \'ef\'ee\'ea\'e0\'e7\'fb\'e2\'e0\'e5\'f2 \'e2\'f0\'e5\'ec\'ff \'e8\'eb\'e8 \'ea\'ee\'eb\'e8\'f7\'e5\'f1\'f2\'e2\'ee \'f2\'e0\'ea\'f2\'ee\'e2 \'f0\'e0\'e1\'ee\'f2\'fb \'ed\'e5\'ee\'ef\'f2\'e8\'ec\'e8\'e7\'e8\'f0\'ee\'e2\'e0\'ed\'ed\'ee\'e3\'ee \'e0\'eb\'e3\'ee\'f0\'e8\'f2\'ec\'e0 Radix-Counting. \'c7\'e5\'eb\'e5\'ed\'fb\'e9 \'e3\'f0\'e0\'f4\'e8\'ea (\'ed\'e8\'e6\'ed\'e8\'e9) \'ef\'ee\'ea\'e0\'e7\'fb\'e2\'e0\'e5\'f2 \'e2\'f0\'e5\'ec\'ff \'e8\'eb\'e8 \'ea\'ee\'eb\'e8\'f7\'e5\'f1\'f2\'e2\'ee \'f2\'e0\'ea\'f2\'ee\'e2 \'f0\'e0\'e1\'ee\'f2\'fb \'ee\'ef\'f2\'e8\'ec\'e8\'e7\'e8\'f0\'ee\'e2\'e0\'ed\'ed\'ee\'e3\'ee \'ef\'ee\'e4 8-\'ef\'f0\'ee\'f6\'e5\'f1\'f1\'ee\'f0\'ed\'f3\'fe \'e2\'fb\'f7\'e8\'f1\'eb\'e8\'f2\'e5\'eb\'fc\'ed\'f3\'fe \'f1\'e8\'f1\'f2\'e5\'ec\'f3 \'e0\'eb\'e3\'ee\'f0\'e8\'f2\'ec\'e0 Radix-Counting.  \'ce\'f1\'fc \'e0\'e1\'f1\'f6\'e8\'f1\'f1 \'ee\'f2\'f0\'e0\'e6\'e0\'e5\'f2 \'ea\'ee\'eb\'e8\'f7\'e5\'f1\'f2\'e2\'ee \cf0 64-\'f5 \'f0\'e0\'e7\'f0\'ff\'e4\'ed\'fb\'f5 \'fd\'eb\'e5\'ec\'e5\'ed\'f2\'ee\'e2 \'f1\'ee\'f0\'f2\'e8\'f0\'f3\'e5\'ec\'fb\'f5 \'ec\'e0\'f1\'f1\'e8\'e2\'ee\'e2\cf1 . \'ce\'f1\'fc  \'ee\'f0\'e4\'e8\'ed\'e0\'f2 \'ee\'f2\'ee\'e1\'f0\'e0\'e6\'e0\'e5\'f2 \'e2\'f0\'e5\'ec\'ff \'e2 \'ec\'e8\'ea\'f0\'ee\'f1\'e5\'ea\'f3\'ed\'e4\'e0\'f5 \'e8\'eb\'e8 \'ea\'ee\'eb\'e8\'f7\'e5\'f1\'f2\'e2\'ee \'f2\'e0\'ea\'f2\'ee\'e2 (\'e2 \'e7\'e0\'e2\'e8\'f1\'e8\'ec\'ee\'f1\'f2\'e8 \'ee\'f2 \'e7\'e0\'e4\'e0\'ed\'ed\'ee\'e3\'ee \'ef\'e0\'f0\'e0\'ec\'e5\'f2\'f0\'e0 \'ab\'c5\'e4\'e8\'ed\'e8\'f6\'fb \'e8\'e7\'ec\'e5\'f0\'e5\'ed\'e8\'ff \cf0\'ef\'ee \'ee\'f1\'e8 Y\'bb).
\par \'cf\'ee \'ee\'ea\'ee\'ed\'f7\'e0\'ed\'e8\'e8 \'fd\'ea\'f1\'ef\'e5\'f0\'e8\'ec\'e5\'ed\'f2\'e0 \'ed\'e0 \'e2\'ea\'eb\'e0\'e4\'ea\'e5 \'ab\'d0\'e5\'e7\'f3\'eb\'fc\'f2\'e0\'f2\'fb \'fd\'ea\'f1\'ef\'e5\'f0\'e8\'ec\'e5\'ed\'f2\'e0\'bb \'ee\'f2\'ee\'e1\'f0\'e0\'e6\'e0\'e5\'f2\'f1\'ff \'e8\'ed\'f4\'ee\'f0\'ec\'e0\'f6\'e8\'ff \'ee\'e1 \'fd\'f4\'f4\'e5\'ea\'f2\'e8\'e2\'ed\'ee\'f1\'f2\'e8 \'e0\'eb\'e3\'ee\'f0\'e8\'f2\'ec\'ee\'e2 \'f1\'ee\'f0\'f2\'e8\'f0\'ee\'e2\'ea\'e8. \'cd\'e0\'ef\'f0\'e8\'ec\'e5\'f0: \'abQuickSort \'f0\'e0\'e1\'ee\'f2\'e0\'eb \'e2 1,4161678 \'f0\'e0\'e7 \'e4\'ee\'eb\'fc\'f8\'e5 Radix-Counting Sort. QuickSort \'f0\'e0\'e1\'ee\'f2\'e0\'eb \'e2 1,7967811 \'f0\'e0\'e7 \'e4\'ee\'eb\'fc\'f8\'e5 Radix-Counting Sort, \'ee\'ef\'f2\'e8\'ec\'e8\'e7\'e8\'f0\'ee\'e2\'e0\'ed\'ed\'ee\'e3\'ee \'ef\'ee\'e4 8-\'ef\'f0\'ee\'f6\'e5\'f1\'f1\'ee\'f0\'ed\'f3\'fe \'dd\'c2\'cc.\'bb.
\par \pard 
\par }
 